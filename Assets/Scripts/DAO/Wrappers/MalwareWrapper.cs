using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

using UnityEngine;

[System.Serializable]
public class MalwareWrapper
{
    public int i;//i
    public int o;//o
    public string t;//t
    public int st;//st
    public int si;//si
    public int sp;//sp
    public int intr;//in

    public int cur;//cur
    public int req;//req
    public int rat;//rat

    public string dt;//dt

    public string[] f;//f

    public MalwareWrapper(Malware malware) {
        i = malware.GetId();
        o = malware.GetOwner();
        t = malware.GetMalwareType();
        st = malware.GetStealth();
        si = malware.GetSize();
        sp = malware.GetSpeed();
        intr = malware.GetIntrusion();
        cur = malware.GetWorkResources();
        req = malware.GetWorkRequirement();
        rat = malware.GetWorkRate();
        dt = (malware.GetTime() != null) ? malware.GetTime().ToString() : "N/A";

        f = malware.GetFeatures().Select(f => f.ToString()).ToArray();
    }

    public Malware Unwrap() {
        Malware malware = new Malware(i);
        malware.SetOwner(o);
        malware.SetMalwareType(t);
        malware.SetStealth(st);
        malware.SetSize(si);
        malware.SetSpeed(sp);
        malware.SetIntrusion(intr);
        malware.SetWorkResources(cur);
        malware.SetWorkRequirement(req);
        malware.SetWorkRate(rat);
        malware.SetTime(DateTime.Parse(dt));

        HashSet<MalwareFeature> features_ = new HashSet<MalwareFeature>();
        f.ToList()
            .ForEach(f => {
                Enum.TryParse(f, out MalwareFeature f_);
                features_.Add(f_);
            });
        malware.SetFeatures(features_);

        return malware;
    }
}
