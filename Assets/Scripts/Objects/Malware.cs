using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Malware : Workable
{
    public const int MAX_MALWARE = 8;
    
    private int id = -1;
    private DateTime time;

    private int owner;
    private string type;

    private int stealth = 0;
    private int speed = 0;
    private int size = 0;
    private int intrusion = 0;

    private int workResources = 0;
    private int workRequirement = 100;
    private int workRate = 0;
    private string workTarget = "self";

    private HashSet<MalwareFeature> features;

    private int spread = -1;

    public Malware(int id) {
        this.id = id;
        features = new HashSet<MalwareFeature>();
    }

    /**
     *  Returns the identification number for the malware.
     *  @returns {int} - The identification number for the malware.
     */
    public int GetId() {
        return id;
    }

    public int GetOwner() {
        return owner;
    }

    public void SetOwner(int owner) {
        this.owner = owner;
    }

    /**
     *  Returns the name of the malware type.
     *  @returns {string} - The name of the malware type.
     */
    public string GetMalwareType() {
        return type;
    }

    /**
     *  Sets the name of the malware type.
     *  @param {string} type - The name of the malware type.
     */
    public void SetMalwareType(string type) {
        this.type = type;
    }

    /**
     *  Returns the stealth attribute value.
     *  @returns {int} - The stealth value of the malware.
     */
    public int GetStealth() {
        return stealth;
    }

    /**
     *  Sets the stealth attribute value.
     *  @param {int} stealth - The stealth value of the malware.
     */
    public void SetStealth(int stealth) {
        this.stealth = stealth;
        
    }

    /**
     *  Returns the speed attribute value.
     *  @returns {int} - The speed value of the malware.
     */
    public int GetSpeed() {
        return speed;
    }

    /**
     *  Sets the speed attribute value.
     *  @param {int} speed - The speed value of the malware.
     */
    public void SetSpeed(int speed) {
        this.speed = speed;
    }

    /**
     *  Returns the size attribute value.
     *  @returns {int} - The size value of the malware.
     */
    public int GetSize() {
        return size;
    }

    /**
     *  Sets the size attribute value.
     *  @param {int} size - The size value of the malware.
     */
    public void SetSize(int size) {
        this.size = size;
    }

    /**
     *  Returns the intrusion attribute value.
     *  @returns {int} - The intrusion value of the malware.
     */
    public int GetIntrusion() {
        return intrusion;
    }

    /**
     *  Sets the intrusion attribute value.
     *  @param {int} intrusion - The intrusion value of the malware.
     */
    public void SetIntrusion(int intrusion) {
        this.intrusion = intrusion;
    }

    public HashSet<MalwareFeature> GetFeatures() {
        return features;
    }
    public bool HasFeature(MalwareFeature feature) {
        return features.Contains(feature);
    }
    public void SetFeatures(HashSet<MalwareFeature> features) {
        this.features = features;
    }
    public void AddFeature(MalwareFeature feature) {
        if (!features.Contains(feature))
            features.Add(feature);
    }

    public int GetWorkResources() {
        return workResources;
    }
    public void SetWorkResources(int currentResources) {
        this.workResources = currentResources;
    }
    public void AddWorkResources(int resources) {
        workResources += resources;
    }

    public int GetWorkRequirement() {
        return workRequirement;
    }
    public void SetWorkRequirement(int requiredResources) {
        this.workRequirement = requiredResources;
    }

    public int GetWorkRate() {
        return workRate;
    }
    public void SetWorkRate(int resourceRate) {
        this.workRate = resourceRate;
    }

    public string GetWorkTarget() {
        return workTarget;
    }
    public void SetWorkTarget(string workTarget) {
        this.workTarget = workTarget;
    }

    public bool IsComplete() {
        return workResources >= workRequirement;
    }

    public void Reset() {
        stealth = 0;
        speed = 0;
        size = 0;
        intrusion = 0;
        type = "";
        workResources = 0;
        time = DateTime.UtcNow;
    }

    public DateTime GetTime() {
        return time;
    }
    public void SetTime(DateTime time) {
        this.time = time;
        string unique = time.ToString();
        Debug.Log("Malware Time: " + unique);
    }

    public int GetSpread() {
        return spread;
    }
    public void SetSpread(int spread) {
        this.spread = spread;
    }

    /**
     *  Returns an array holding all of the attributes of the malware.
     *  @returns {int[]} - An array holding all attributes of the malware.
     */
    public int[] GetAttributes() {
        return new int[]{GetStealth(), GetSpeed(), GetSize(), GetIntrusion()};
    }

    public MalwareWrapper Wrap() {
        return new MalwareWrapper(this);
    }
}
