using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class MalwareController : MonoBehaviour
{
    private List<Malware> malware;

    [SerializeField]
    private GameObject selectionWindow;
    [SerializeField]
    private GameObject customizationWindow;

    private int malwareNumber;

    public void Start() {
        LoadMalware();
    }

    public void LoadMalware() {
        malware = new List<Malware>();
        for (int i = 0; i < 8; i++) {
            malware.Add(new Malware(i+1));
        }
        Debug.Log("Malware added.");
    }

    public void OnClick(int i) {
        customizationWindow.SetActive(true);
        malwareNumber = i;
        Debug.Log("Opening malware " + malwareNumber + ".");
        ResetSetup();
        selectionWindow.SetActive(false);
    }

    public void TypeClick(string type) {
        malware[malwareNumber].SetMalwareType(type);
        Debug.Log("Changing malware " + malwareNumber + " to " + malware[malwareNumber].GetMalwareType() + ".");
    }

    public void StealthChange(float value) {
        malware[malwareNumber].SetStealth((int) (value * GameManager.VALUE_SCALE));
        Debug.Log("Updating Stealth of malware " + malwareNumber + " to " + malware[malwareNumber].GetStealth() + ".");
    }
    public void SpeedChange(float value) {
        malware[malwareNumber].SetSpeed((int) (value * GameManager.VALUE_SCALE));
        Debug.Log("Updating Speed of malware " + malwareNumber + " to " + malware[malwareNumber].GetSpeed() + ".");
    }
    public void SizeChange(float value) {
        malware[malwareNumber].SetSize((int) (value * GameManager.VALUE_SCALE));
        Debug.Log("Updating Size of malware " + malwareNumber + " to " + malware[malwareNumber].GetSize() + ".");
    }
    public void IntrusionChange(float value) {
        malware[malwareNumber].SetIntrusion((int) (value * GameManager.VALUE_SCALE));
        Debug.Log("Updating Intrusion of malware " + malwareNumber + " to " + malware[malwareNumber].GetIntrusion() + ".");
    }

    public void Back() {
        selectionWindow.SetActive(true);
        malwareNumber = 0;
        customizationWindow.SetActive(false);
    }

    public int GetMalwareNumber() {
        return malwareNumber;
    }

    public Malware GetMalware(int i) {
        return malware[i];
    }

    private void ResetSetup() {
        GameObject[] sliders = GameObject.FindGameObjectsWithTag("MalwareAttribute");
        for (int i = 0; i < sliders.Length; i++) {
            Slider slider = sliders[i].GetComponent<Slider>();
            if (slider != null) slider.value = (float) malware[malwareNumber].GetAttributes()[i] / GameManager.VALUE_SCALE;
        }
    }
}
