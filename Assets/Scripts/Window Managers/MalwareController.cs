using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class MalwareController : MonoBehaviour, ISavable
{
    private Dictionary<int, Malware> malware;

    [SerializeField]
    private GameManager gameManager;
    [SerializeField]
    private PlayerManager playerManager;

    [SerializeField]
    private GameObject selectionWindow;
    [SerializeField]
    private GameObject customizationWindow;

    [SerializeField]
    private GameObject resourceDisplay;

    private int malwareNumber;

    public void Start() {
        resourceDisplay.GetComponent<TextMeshProUGUI>().SetText("0");
    }

    /**
     *  Initializes the list of malware.
     */
    public void LoadMalware() {

        malware = new Dictionary<int, Malware>();
        for (int i = 1; i <= GameManager.GetNumPlayers(); i++) {
            for (int j = 1; j <= GameManager.MALWARE_PER_PLAYER; j++) {
                Malware m = new Malware(i*100+j);
                malware.Add(i*100+j, m);
                m.SetOwner(i-1);
            }
        }
        Debug.Log("Malware initialized.");
    }

    /**
     *  Switches from selection window to customization window of malware i
     *  @param {int} i - the index of the button pressed
     */
    public void OnClick(int i) {
        // Set the customization window to active and set active malware
        customizationWindow.SetActive(true);
        malwareNumber = (GameManager.GetTurnPlayer() + 1) * 100 + i + 1;

        Debug.Log("Opening malware " + malwareNumber + ".");

        // Reset the configuration of the customization window and set it to that of the active malware
        ResetSetup();

        // Disable the selection window
        selectionWindow.SetActive(false);
    }

    /**
     *  onClick event listener to change the type of the malware.
     *  @param {string} type - The type of malware chosen.
     */
    public void TypeClick(string type) {
        malware[malwareNumber].SetMalwareType(type);
        Debug.Log("Changing malware " + malwareNumber + " to " + malware[malwareNumber].GetMalwareType() + ".");
    }

    /**
     *  slider event listener to change the attribute, stealth of the malware.
     *  @param {float} - The new value of the slider.
     */
    public void StealthChange(float value) {
        malware[malwareNumber].SetStealth((int) (value * GameManager.VALUE_SCALE));
        Debug.Log("Updating Stealth of malware " + malwareNumber + " to " + malware[malwareNumber].GetStealth() + ".");
    }

    /**
     *  slider event listener to change the attribute, speed of the malware.
     *  @param {float} - The new value of the slider.
     */
    public void SpeedChange(float value) {
        malware[malwareNumber].SetSpeed((int) (value * GameManager.VALUE_SCALE));
        Debug.Log("Updating Speed of malware " + malwareNumber + " to " + malware[malwareNumber].GetSpeed() + ".");
    }

    /**
     *  slider event listener to change the attribute, size of the malware.
     *  @param {float} - The new value of the slider.
     */
    public void SizeChange(float value) {
        malware[malwareNumber].SetSize((int) (value * GameManager.VALUE_SCALE));
        Debug.Log("Updating Size of malware " + malwareNumber + " to " + malware[malwareNumber].GetSize() + ".");
    }

    /**
     *  slider event listener to change the attribute, intrusion of the malware.
     *  @param {float} - The new value of the slider.
     */
    public void IntrusionChange(float value) {
        malware[malwareNumber].SetIntrusion((int) (value * GameManager.VALUE_SCALE));
        Debug.Log("Updating Intrusion of malware " + malwareNumber + " to " + malware[malwareNumber].GetIntrusion() + ".");
    }

    public void ResourceClick(int change) {
        Player player = PlayerManager.GetPlayer(GameManager.GetTurnPlayer());
        if (!(player.GetAvailableResources() - change > player.GetOverallResources()) &&
            !(player.GetAvailableResources() - change < 0) &&
            !(Int32.Parse(resourceDisplay.GetComponent<TextMeshProUGUI>().text) == 0 && change < 0)) {

            player.SetAvailableResources(player.GetAvailableResources() - change);
            resourceDisplay.GetComponent<TextMeshProUGUI>().SetText((Int32.Parse(resourceDisplay.GetComponent<TextMeshProUGUI>().text) + change).ToString());

            malware[malwareNumber].SetWorkRate(Int32.Parse(resourceDisplay.GetComponent<TextMeshProUGUI>().text));

            Debug.Log("Available: " + player.GetAvailableResources());
        } else {
            Debug.Log("Invalid Resources");
        }
        playerManager.UpdateDisplay();
    }


    /**
     *  onClick event listener to go back to malware selection window.
     */
    public void Back() {
        selectionWindow.SetActive(true);
        malware[malwareNumber].SetTime(DateTime.UtcNow);
        malwareNumber = 0;
        customizationWindow.SetActive(false);
    }

    /**
     *  Returns the number of which malware is currently selected.
     *  @returns {int} - the number of which malware is currently selected.
     */
    public int GetMalwareNumber() {
        return malwareNumber;
    }

    /**
     *  Returns the malware with the corresponding index in malware list.
     *  @param {int} i - The index of where the malware is on malware list.
     *  @returns {Malware} - The malware object at given index.
     */
    public Malware GetMalware(int i) {
        //if (malware == null) LoadMalware();
        return malware[i];
    }

    public Dictionary<int, Malware> GetMalware() {
        return malware;
    }

    public void SetMalware(Dictionary<int, Malware> malware) {
        this.malware = malware;
    }

    /**
     *  Resets the values of the sliders to that of the attributes on the selected malware.
     */
    private void ResetSetup() {
        GameObject[] sliders = GameObject.FindGameObjectsWithTag("MalwareAttribute");
        for (int i = 0; i < sliders.Length; i++) {
            Slider slider = sliders[i].GetComponent<Slider>();
            if (slider != null) slider.value = (float) malware[malwareNumber].GetAttributes()[i] / GameManager.VALUE_SCALE;
        }

        resourceDisplay.GetComponent<TextMeshProUGUI>().SetText(malware[malwareNumber].GetWorkRate().ToString());
    }

    public void Work() {
        malware
            .Where(m => m.Value.GetOwner() == GameManager.GetTurnPlayer())
            .ToList()
            .ForEach(m => {
                m.Value.SetWorkResources(m.Value.GetWorkResources() + m.Value.GetWorkRate());
                if (m.Value.IsComplete()) {
                    Debug.Log("Malware " + m.Value.GetId() + " is Complete.");
                    Player p = PlayerManager.GetPlayer(m.Value.GetOwner());
                    p.SetAvailableResources(p.GetAvailableResources() + m.Value.GetWorkRate());
                    m.Value.SetWorkRate(0);
                    playerManager.UpdateDisplay();
                }
            });
    }

    public void Save() {
        MalwareDAO dao = new MalwareDAO();
        dao.Save(this);
    }

    public void Load() {
        MalwareDAO dao = new MalwareDAO();
        if (!dao.Load(this)) LoadMalware();
    }
}
